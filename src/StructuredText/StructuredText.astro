---
import {
  type Node as DastNode,
  type Document,
  type Record as DatocmsRecord,
  type StructuredText,
  isDocument,
  isNode,
  isStructuredText,
} from 'datocms-structured-text-utils';

import Node from './Node.astro';
import type { BlockComponents, InlineItemComponents, ItemLinkComponents, Overrides } from './types';

// It would be better to type this as:
//
// interface Props<R1 extends DatocmsRecord = any, R2 extends DatocmsRecord = any>
//
// but it's currently not possible: https://github.com/withastro/roadmap/discussions/601#discussioncomment-10333959

interface Props {
  data: StructuredText<DatocmsRecord, DatocmsRecord> | Document | DastNode | null | undefined;

  blockComponents?: BlockComponents<DatocmsRecord, DatocmsRecord>;
  itemLinkComponents?: ItemLinkComponents<DatocmsRecord, DatocmsRecord>;
  inlineItemComponents?: InlineItemComponents<DatocmsRecord, DatocmsRecord>;
  overrides?: Overrides;
}

const { data, ...rest } = Astro.props;

const node = !data
  ? null
  : isStructuredText(data) && isDocument(data.value)
    ? data.value.document
    : isDocument(data)
      ? data.document
      : isNode(data)
        ? data
        : undefined;

const blocks = isStructuredText(data) ? data?.blocks : undefined;

const links = isStructuredText(data) ? data?.links : undefined;
---

{node && <Node {node} {blocks} {links} {...rest} />}
