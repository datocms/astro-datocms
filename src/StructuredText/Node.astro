---
import {
  type Block,
  type Record as DatocmsRecord,
  type InlineItem,
  type ItemLink,
  type Node as DastNode,
  hasChildren,
  isBlock,
  isInlineItem,
  isItemLink,
  RenderError,
  type NodeType,
} from 'datocms-structured-text-utils';

import Blockquote from './nodes/Blockquote.astro';
import Code from './nodes/Code.astro';
import Heading from './nodes/Heading.astro';
import Link from './nodes/Link.astro';
import List from './nodes/List.astro';
import ListItem from './nodes/ListItem.astro';
import Paragraph from './nodes/Paragraph.astro';
import Root from './nodes/Root.astro';
import Span from './nodes/Span.astro';
import ThematicBreak from './nodes/ThematicBreak.astro';
import BlockComponent from './nodes/Block.astro';
import InlineItemComponent from './nodes/InlineItem.astro';
import ItemLinkComponent from './nodes/ItemLink.astro';

import type {
  BlockComponents,
  InlineItemComponents,
  ItemLinkComponents,
  Overrides,
  AstroComponent,
} from './types';

interface Props {
  node: DastNode;

  blocks?: DatocmsRecord[];
  links?: DatocmsRecord[];

  blockComponents?: BlockComponents<DatocmsRecord, DatocmsRecord>;
  itemLinkComponents?: ItemLinkComponents<DatocmsRecord, DatocmsRecord>;
  inlineItemComponents?: InlineItemComponents<DatocmsRecord, DatocmsRecord>;
  overrides?: Overrides;
}

const { node, ...rest } = Astro.props;

const { blocks, links, blockComponents, itemLinkComponents, inlineItemComponents, overrides } =
  rest;

function findRecordInBlocks(node: Block) {
  const record = (blocks || []).find(({ id }) => id === node.item);

  if (!record) {
    throw new RenderError(
      `The Structured Text document contains a 'block' node, but cannot find a record with ID ${node.item} inside data.blocks!`,
      node,
    );
  }

  return record;
}

function findRecordInLinks(node: ItemLink | InlineItem) {
  const record = (links || []).find(({ id }) => id === node.item);

  if (!record) {
    throw new RenderError(
      `The Structured Text document contains an '${node.type}' node, but cannot find a record with ID ${node.item} inside data.links!`,
      node,
    );
  }

  return record;
}

const defaultComponents: Record<NodeType, AstroComponent> = {
  paragraph: Paragraph,
  root: Root,
  span: Span,
  link: Link,
  list: List,
  heading: Heading,
  blockquote: Blockquote,
  listItem: ListItem,
  thematicBreak: ThematicBreak,
  code: Code,
  itemLink: ItemLinkComponent,
  inlineItem: InlineItemComponent,
  block: BlockComponent,
};

const otherNodeComponents: Record<NodeType, AstroComponent> = {
  ...defaultComponents,
  ...overrides,
};

const Component = otherNodeComponents[node.type];
---

<>
  {
    isBlock(node) ? (
      <Component {node} block={findRecordInBlocks(node)} {blockComponents} />
    ) : isInlineItem(node) ? (
      <Component {node} record={findRecordInLinks(node)} {inlineItemComponents} />
    ) : isItemLink(node) ? (
      <Component {node} record={findRecordInLinks(node)} {itemLinkComponents}>
        {node.children.map((child) => (
          <Astro.self node={child} {...rest} />
        ))}
      </Component>
    ) : (
      <Component {node}>
        {hasChildren(node) && node.children.map((child) => <Astro.self node={child} {...rest} />)}
      </Component>
    )
  }
</>
